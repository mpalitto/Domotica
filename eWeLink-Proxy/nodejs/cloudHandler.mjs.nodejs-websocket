// /////////////////// ////
//                     ////
// PROXY functionality ////
//                     ////
// /////////////////// ////
// for each deviceID connects to the cloud server and pretends its the device that just connected
// to our local server...
var reAPIkey = /apikey[^,]+/; //regular expression for the apikey...
var clientOptions = {};
var clientConn;
clientOptions.rejectUnauthorized = false;
// when a WS connection request comes from sONOFF device to our local server
// this clientHandler function is called
// 1. makes a DISPATCH request to the cloud server for the device
// 2. establishes a WS connection to the cloud server for relaying the infos received from sONOFF device and vice versa
//
// it receives the sONOFF deviceID and the client connection to the cloud server
import { sONOFF, proxyEvent } from './sharedVARs.js'
import ws from 'nodejs-websocket'; // WebSocket client for connecting to the CLOUD server

export const cloudHandler = {};

const CLOUD_SERVER_URL = 'wss://eu-disp.coolkit.cc'; // Cloud server address
const RECONNECT_INTERVAL = 5000; // 5 seconds

cloudHandler.connect = (deviceid) => {

  const client = ws.connect(CLOUD_SERVER_URL, {
    rejectUnauthorized: false // disable server certificate verification
  }, () => {
    console.log('Connected to CLOUD WebSocket server for device: ' + deviceid);
    client.sendText(sONOFF[deviceid]['registerSTR']); // 1st step in the registration process
	sONOFF[deviceid]['cloud'] = 'register';   // we have sent the register request and are waiting for cloud server reply
  });

  // when a message from cloud server is received
  client.on('text', function (message) {
    console.log('Received message from CLOUD server:', message);

	let startTime = new Date();
	let swState = 'off';
    let res = JSON.parse(message); // from string into an object
    // rest of your message handling logic...
    // check if the message is a response from message sent previosly by proxy
    // in that case check if we are in the initial device registration process
    // in which case continue sending the next registration process step message 
    // NOTE: the reg. process is decoupled from the real device which is assumed to be already connected to the proxy
    if (res['error'] == 0 && sONOFF[deviceid]['cloud'] == 'register') { // we have received the OK response from our register request
        console.log('CLIENT sending CLOUD SERVER date request for: ' + deviceid);
        client.send(sONOFF[deviceid]['dateSTR']); // 2nd step in the registration process
        sONOFF[deviceid]['cloud'] = 'date'; //we sent the register request and will wait for reply
    } else if (res['error'] == 0 && sONOFF[deviceid]['cloud'] == 'date') { // we have received the OK response from our date request
        console.log('CLIENT sending CLOUD SERVER update request for: ' + deviceid);
        client.send(sONOFF[deviceid]['updateSTR']); // 3rd step in the registration process
        sONOFF[deviceid]['cloud'] = 'update'; //we should now be registered with the cloud server
    } else if (res['error'] == 0 && sONOFF[deviceid]['cloud'] == 'update') { // we have received the OK response from our update request
        console.log('CLIENT sending CLOUD SERVER timers query request for: ' + deviceid);
        client.send(sONOFF[deviceid]['querySTR']); // 4th step in the registration process
        sONOFF[deviceid]['cloud'] = 'query'; //we should now be registered with the cloud server
    } else if (res['error'] == 0 && sONOFF[deviceid]['cloud'] == 'query') { // we have received the OK response from our query request
        //client.send(sONOFF[deviceid]['dateSTR']); // final step in the registration process
        sONOFF[deviceid]['cloud'] = 'registered';   // and now completed the registration process with the cloud server
        sONOFF[deviceid]['cloudWS'] = client;           // we are ready now to forward messages from cloud to device
    }
  });

  client.on('error', function (error) {
    console.error('WebSocket error:', error);
    reconnect();
  });

  client.on('close', function () {
    console.log('Disconnected from CLOUD WebSocket server');
    reconnect();
  });

  function reconnect() {
    console.log(`Reconnecting in ${RECONNECT_INTERVAL / 1000} seconds...`);
    setTimeout(() => {
        cloudHandler.connect();
    }, RECONNECT_INTERVAL);
  }
}

cloudHandler.forward2cloud = (deviceID, message) => {
    console.log('forwarding to Cloud :' + message)
    sONOFF[deviceID]['cloudWS'] && sONOFF[deviceID]['cloudWS'].sendText(message);
}
